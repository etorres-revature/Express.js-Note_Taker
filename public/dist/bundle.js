/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is not neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/*!***********************************!*\
  !*** ./public/assets/js/index.js ***!
  \***********************************/
/*! unknown exports (runtime-defined) */
/*! runtime requirements:  */
eval("const $noteTitle = $(\".note-title\");\nconst $noteText = $(\".note-textarea\");\nconst $saveNoteBtn = $(\".save-note\");\nconst $newNoteBtn = $(\".new-note\");\nconst $noteList = $(\".list-container .list-group\");\n\n// activeNote is used to keep track of the note in the textarea\nlet activeNote = {};\n\n// A function for getting all notes from the db\nconst getNotes = () => {\n  return $.ajax({\n    url: \"/api/notes\",\n    method: \"GET\",\n  });\n};\n\n// A function for saving a note to the db\nconst saveNote = (note) => {\n  return $.ajax({\n    url: \"/api/notes\",\n    data: note,\n    method: \"POST\",\n  });\n};\n\n// A function for deleting a note from the db\nconst deleteNote = (id) => {\n  return $.ajax({\n    url: \"api/notes/\" + id,\n    method: \"DELETE\",\n  });\n};\n\n// If there is an activeNote, display it, otherwise render empty inputs\nconst renderActiveNote = () => {\n  $saveNoteBtn.hide();\n\n  if (activeNote.id) {\n    $noteTitle.attr(\"readonly\", true);\n    $noteText.attr(\"readonly\", true);\n    $noteTitle.val(activeNote.title);\n    $noteText.val(activeNote.text);\n  } else {\n    $noteTitle.attr(\"readonly\", false);\n    $noteText.attr(\"readonly\", false);\n    $noteTitle.val(\"\");\n    $noteText.val(\"\");\n  }\n};\n\n// Get the note data from the inputs, save it to the db and update the view\nconst handleNoteSave = function () {\n  const newNote = {\n    title: $noteTitle.val(),\n    text: $noteText.val()\n  };\n\n  saveNote(newNote).then(() => {\n    getAndRenderNotes();\n    renderActiveNote();\n  });\n};\n\n// Delete the clicked note\nconst handleNoteDelete = function (event) {\n  // prevents the click listener for the list from being called when the button inside of it is clicked\n  event.stopPropagation();\n\n  const note = $(this).parent(\".list-group-item\").data();\n\n  if (activeNote.id === note.id) {\n    activeNote = {};\n  }\n\n  deleteNote(note.id).then(() => {\n    getAndRenderNotes();\n    renderActiveNote();\n  });\n};\n\n// Sets the activeNote and displays it\nconst handleNoteView = function () {\n  activeNote = $(this).data();\n  renderActiveNote();\n};\n\n// Sets the activeNote to and empty object and allows the user to enter a new note\nconst handleNewNoteView = function () {\n  activeNote = {};\n  renderActiveNote();\n};\n\n// If a note's title or text are empty, hide the save button\n// Or else show it\nconst handleRenderSaveBtn = function () {\n  if (!$noteTitle.val().trim() || !$noteText.val().trim()) {\n    $saveNoteBtn.hide();\n  } else {\n    $saveNoteBtn.show();\n  }\n};\n\n// Render's the list of note titles\nconst renderNoteList = (notes) => {\n  $noteList.empty();\n\n  const noteListItems = [];\n\n  // Returns jquery object for li with given text and delete button\n  // unless withDeleteButton argument is provided as false\n  const create$li = (text, withDeleteButton = true) => {\n    const $li = $(\"<li class='list-group-item'>\");\n    const $span = $(\"<span>\").text(text);\n    $li.append($span);\n\n    if (withDeleteButton) {\n      const $delBtn = $(\n        \"<i class='fas fa-trash-alt float-right text-danger delete-note'>\"\n      );\n      $li.append($delBtn);\n    }\n    return $li;\n  };\n\n  if (notes.length === 0) {\n    noteListItems.push(create$li(\"No saved Notes\", false));\n  }\n\n  notes.forEach((note) => {\n    const $li = create$li(note.title).data(note);\n    noteListItems.push($li);\n  });\n\n  $noteList.append(noteListItems);\n};\n\n// Gets notes from the db and renders them to the sidebar\nconst getAndRenderNotes = () => {\n  return getNotes().then(renderNoteList);\n};\n\n$saveNoteBtn.on(\"click\", handleNoteSave);\n$noteList.on(\"click\", \".list-group-item\", handleNoteView);\n$newNoteBtn.on(\"click\", handleNewNoteView);\n$noteList.on(\"click\", \".delete-note\", handleNoteDelete);\n$noteTitle.on(\"keyup\", handleRenderSaveBtn);\n$noteText.on(\"keyup\", handleRenderSaveBtn);\n\n// Gets and renders the initial list of notes\ngetAndRenderNotes();\n\n\n//# sourceURL=webpack://note-taker/./public/assets/js/index.js?");
/******/ })()
;